# -*- coding: utf-8 -*-
"""subreddit_modeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SODZZD7ubrj942sm5PTKIlF-HZ1EkdKB
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd

apple = pd.read_csv("/content/gdrive/My Drive/DS440_final/AAPL_440.csv")
AMD = pd.read_csv("/content/gdrive/My Drive/DS440_final/AMD_440.csv")
FB = pd.read_csv("/content/gdrive/My Drive/DS440_final/FB_440.csv")
ford = pd.read_csv("/content/gdrive/My Drive/DS440_final/F_440.csv")
snap = pd.read_csv("/content/gdrive/My Drive/DS440_final/SNAP_440.csv")

apple_freq = pd.read_csv('/content/gdrive/My Drive/DS440_final/Apple_freq.csv', index_col=[0])
FB_freq = pd.read_csv('/content/gdrive/My Drive/DS440_final/Fb_freq.csv', index_col=[0])
AMD_freq = pd.read_csv('/content/gdrive/My Drive/DS440_final/Amd_freq.csv', index_col=[0])
snap_freq = pd.read_csv('/content/gdrive/My Drive/DS440_final/Snap_freq.csv', index_col=[0])
ford_freq = pd.read_csv('/content/gdrive/My Drive/DS440_final/Ford_freq.csv', index_col=[0])

# from google.colab import drive
# drive.mount('/content/drive')

apple.head(20)

apple_freq.head()

AMD.head()

FB.head()

ford.head()

snap.head()

apple.dtypes

pip install pandas sklearn matplotlib

apple.set_index('Date', inplace = True)
print(apple.head (5))

AMD.set_index('Date', inplace = True)
FB.set_index('Date', inplace = True)
ford.set_index('Date', inplace = True)
snap.set_index('Date', inplace = True)

apple.dtypes

snap.dtypes

apple.describe()

apple_merged = pd.merge(apple, apple_freq, how ='outer', on='Date').fillna(0).sort_values('Date').set_index('Date')
apple_merged.head()

amd_merged = pd.merge(AMD, AMD_freq, how ='outer', on='Date').fillna(0).sort_values('Date').set_index('Date')
amd_merged.head()

fb_merged = pd.merge(FB, FB_freq, how ='outer', on='Date').fillna(0).sort_values('Date').set_index('Date')
fb_merged.head()

ford_merged = pd.merge(ford, ford_freq, how ='outer', on='Date').fillna(0).sort_values('Date').set_index('Date')
ford_merged.head()

snap_merged = pd.merge(snap, snap_freq, how ='outer', on='Date').fillna(0).sort_values('Date').set_index('Date')
snap_merged.head()

# import pandas_ta as ta
# apple.ta.ema(close='Adj_close', length=10, append=True)

df = pd.DataFrame(apple_merged, columns=['Adj Close','frequency'])
df =df[df['Adj Close'] !=0]
df = df.reset_index()
df.head()

df1 = pd.DataFrame(amd_merged, columns=['Adj Close','frequency'])
df1 =df1[df1['Adj Close'] !=0]
df1 = df1.reset_index()
df1.head()

df2 = pd.DataFrame(fb_merged, columns=['Adj Close','frequency'])
df2 =df2[df2['Adj Close'] !=0]
df2 = df2.reset_index()
df2.head()

df3 = pd.DataFrame(ford_merged, columns=['Adj Close','frequency'])
df3 =df3[df3['Adj Close'] !=0]
df3 = df3.reset_index()
df3.head()

df4 = pd.DataFrame(snap_merged, columns=['Adj Close','frequency'])
df4 =df4[df4['Adj Close'] !=0]
df4 = df4.reset_index()
df4.head(20)

# df = pd.DataFrame(apple, columns=['Adj Close'])
# df1 = pd.DataFrame(AMD, columns=['Adj Close'])
# df2 = pd.DataFrame(FB, columns=['Adj Close'])
# df3 = pd.DataFrame(ford, columns=['Adj Close'])
# df4 = pd.DataFrame(snap, columns=['Adj Close'])

df.info()

df1.info()

df2.info()

df3.info()

df4.info()

#df.isna().values.any()
df1.isna().values.any()
df2.isna().values.any()
df3.isna().values.any()
df4.isna().values.any()

# df.shape

# df1.shape

# df2.shape

# df3.shape

# df4.shape

apple_train_test = df[:1070]

amd_train_test = df1[:1070]

fb_train_test = df2[:1075]

ford_train_test = df3[:1070]

snap_train_test = df4[:1035]

apple_train_test.head()

def remove_first(array):
    new_array=[]
    for x in array:
        new_array.append(x[1:])
    return np.asarray(new_array)

from sklearn.model_selection import train_test_split
import numpy as np
from datetime import datetime


d = int(float(datetime.strptime("2016-07-20", "%Y-%m-%d").strftime("%Y%m%d"))*1000)


print(d)

fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

train, test = train_test_split(fb_train_test, test_size=0.20)
fb_X_train = []
fb_Y_train = []

# print(train[0][2])

length = len(train)

for i in range(length):
  fb_X_train.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , train[i][2]])

for i in range(length):
  fb_Y_train.append([train[i][1]])


print(fb_X_train)

#fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

#train, test = train_test_split(fb_train_test, test_size=0.20)
# fb_X_train = []
# fb_Y_train = []
fb_X_test = []
fb_Y_test = []
# print(train[0][2])

length = len(test)

for i in range(length):
  fb_X_test.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , test[i][2]])

for i in range(length):
  fb_Y_test.append([test[i][1]])


fb_val = df2[1070:]

from sklearn.model_selection import train_test_split
import numpy as np
from datetime import datetime


d = int(float(datetime.strptime("2016-07-20", "%Y-%m-%d").strftime("%Y%m%d"))*1000)


print(d)

apple_train_test = np.array(apple_train_test)

# print(fb_train_test[0])

train, test = train_test_split(apple_train_test, test_size=0.20)
apple_X_train = []
apple_Y_train = []

# print(train[0][2])

length = len(train)

for i in range(length):
  apple_X_train.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , train[i][2]])

for i in range(length):
  apple_Y_train.append([train[i][1]])


print(apple_X_train)

#fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

#train, test = train_test_split(fb_train_test, test_size=0.20)
# fb_X_train = []
# fb_Y_train = []
apple_X_test = []
apple_Y_test = []
# print(train[0][2])

length = len(test)

for i in range(length):
  apple_X_test.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , test[i][2]])

for i in range(length):
  apple_Y_test.append([test[i][1]])


apple_val = df[1070:]

from sklearn.model_selection import train_test_split
import numpy as np
from datetime import datetime


d = int(float(datetime.strptime("2016-07-20", "%Y-%m-%d").strftime("%Y%m%d"))*1000)


print(d)

amd_train_test = np.array(amd_train_test)

# print(fb_train_test[0])

train, test = train_test_split(amd_train_test, test_size=0.20)
amd_X_train = []
amd_Y_train = []

# print(train[0][2])

length = len(train)

for i in range(length):
  amd_X_train.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , train[i][2]])

for i in range(length):
  amd_Y_train.append([train[i][1]])


print(amd_X_train)

#fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

#train, test = train_test_split(fb_train_test, test_size=0.20)
# fb_X_train = []
# fb_Y_train = []
amd_X_test = []
amd_Y_test = []
# print(train[0][2])

length = len(test)

for i in range(length):
  amd_X_test.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , test[i][2]])

for i in range(length):
  amd_Y_test.append([test[i][1]])


amd_val = df1[1070:]

from sklearn.model_selection import train_test_split
import numpy as np
from datetime import datetime


d = int(float(datetime.strptime("2016-07-20", "%Y-%m-%d").strftime("%Y%m%d"))*1000)


print(d)

ford_train_test = np.array(ford_train_test)

# print(fb_train_test[0])

train, test = train_test_split(ford_train_test, test_size=0.20)
ford_X_train = []
ford_Y_train = []

# print(train[0][2])

length = len(train)

for i in range(length):
  ford_X_train.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , train[i][2]])

for i in range(length):
  ford_Y_train.append([train[i][1]])


print(ford_X_train)

#fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

#train, test = train_test_split(fb_train_test, test_size=0.20)
# fb_X_train = []
# fb_Y_train = []
ford_X_test = []
ford_Y_test = []
# print(train[0][2])

length = len(test)

for i in range(length):
  ford_X_test.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , test[i][2]])

for i in range(length):
  ford_Y_test.append([test[i][1]])


ford_val = df3[1070:]

from sklearn.model_selection import train_test_split
import numpy as np
from datetime import datetime


d = int(float(datetime.strptime("2016-07-20", "%Y-%m-%d").strftime("%Y%m%d"))*1000)


print(d)

snap_train_test = np.array(snap_train_test)

# print(fb_train_test[0])

train, test = train_test_split(snap_train_test, test_size=0.20)
snap_X_train = []
snap_Y_train = []

# print(train[0][2])

length = len(train)

for i in range(length):
  snap_X_train.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , train[i][2]])

for i in range(length):
  snap_Y_train.append([train[i][1]])


print(snap_X_train)

#fb_train_test = np.array(fb_train_test)

# print(fb_train_test[0])

#train, test = train_test_split(fb_train_test, test_size=0.20)
# fb_X_train = []
# fb_Y_train = []
snap_X_test = []
snap_Y_test = []
# print(train[0][2])

length = len(test)

for i in range(length):
  snap_X_test.append([int(float(datetime.strptime(train[i][0], "%Y-%m-%d").strftime("%Y%m%d"))*1000)
                     , test[i][2]])

for i in range(length):
  snap_Y_test.append([test[i][1]])


snap_val = df4[1070:]

"""**SVM**

apple
"""

from sklearn import svm
# clf = svm.SVR(kernel='rbf')
# clf.fit(fb_X_train, fb_Y_train)
svr_rbf = svm.SVR(kernel='rbf')
apple_y_rbf = svr_rbf.fit(apple_X_train,apple_Y_train).predict(apple_X_test)

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(apple_Y_test, apple_y_rbf))
print("RMSE: %f" % (rmse))
#print('R2: ', metrics.r2_score(fb_Y_test, y_rbf))
from sklearn.metrics import explained_variance_score
explained_variance_score(apple_Y_test, apple_y_rbf)

"""amd"""

from sklearn import svm
# clf = svm.SVR(kernel='rbf')
# clf.fit(fb_X_train, fb_Y_train)
svr_rbf = svm.SVR(kernel='rbf')
amd_y_rbf = svr_rbf.fit(amd_X_train,amd_Y_train).predict(amd_X_test)

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(amd_Y_test, amd_y_rbf))
print("RMSE: %f" % (rmse))
#print('R2: ', metrics.r2_score(fb_Y_test, y_rbf))
from sklearn.metrics import explained_variance_score
explained_variance_score(amd_Y_test, amd_y_rbf)

"""facebook

"""

# from sklearn.svm import SVC
# svclassifier = SVC(kernel='linear')
# svclassifier.fit(fb_X_train, fb_Y_train)
# y_pred = svclassifier.predict(fb_X_test)

from sklearn import svm
# clf = svm.SVR(kernel='rbf')
# clf.fit(fb_X_train, fb_Y_train)

svr_rbf = svm.SVR(kernel='rbf')

y_rbf = svr_rbf.fit(fb_X_train,fb_Y_train).predict(fb_X_test)
print(y_rbf)

# from sklearn.preprocessing import StandardScaler
# scaler = StandardScaler()
# fb_X_test=scaler.fit(fb_Y_test)
# clf.predict(fb_X_test)

# y_pred2 = clf.predict(fb_X_test)
# df2['Prediction'] = clf.predict(np.array(df2.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(fb_Y_test, y_rbf))
print("RMSE: %f" % (rmse))
#print('R2: ', metrics.r2_score(fb_Y_test, y_rbf))
from sklearn.metrics import explained_variance_score
explained_variance_score(fb_Y_test, y_rbf)

"""ford"""

from sklearn import svm
# clf = svm.SVR(kernel='rbf')
# clf.fit(fb_X_train, fb_Y_train)
svr_rbf = svm.SVR(kernel='rbf')
ford_y_rbf = svr_rbf.fit(ford_X_train,ford_Y_train).predict(ford_X_test)

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(ford_Y_test, ford_y_rbf))
print("RMSE: %f" % (rmse))
#print('R2: ', metrics.r2_score(fb_Y_test, y_rbf))
from sklearn.metrics import explained_variance_score
explained_variance_score(ford_Y_test, ford_y_rbf)

"""snap


"""

from sklearn import svm
# clf = svm.SVR(kernel='rbf')
# clf.fit(fb_X_train, fb_Y_train)
svr_rbf = svm.SVR(kernel='rbf')
snap_y_rbf = svr_rbf.fit(snap_X_train,snap_Y_train).predict(snap_X_test)

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(snap_Y_test, snap_y_rbf))
print("RMSE: %f" % (rmse))
#print('R2: ', metrics.r2_score(fb_Y_test, y_rbf))
from sklearn.metrics import explained_variance_score
explained_variance_score(snap_Y_test, snap_y_rbf)

"""**Linear Regression**

apple
"""

# from sklearn.linear_model import LinearRegression
# nsamples, nx, ny = train_dataset.shape
# d2_train_dataset = train_dataset.reshape((nsamples,nx*ny))
# model = LinearRegression()
# model.fit(apple_X_train, apple_Y_train)
# y_pred = model.predict(apple_X_test)
# df['Prediction'] = model.predict(np.array(df.index).reshape(-1, 1))

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(apple_X_train, apple_Y_train)

y_pred = model.predict(apple_X_test)
from sklearn import metrics
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(apple_Y_test, y_pred)))
print('R2: ', metrics.r2_score(apple_Y_test, y_pred))
from sklearn.metrics import explained_variance_score
explained_variance_score(apple_Y_test, y_pred)

"""amd"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(amd_X_train, amd_Y_train)

y_pred1 = model.predict(amd_X_test)
#df1['Prediction'] = model.predict(np.array(df1.index).reshape(-1, 1))

from sklearn import metrics
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(amd_Y_test, y_pred1)))
print('R2: ', metrics.r2_score(amd_Y_test, y_pred1))
from sklearn.metrics import explained_variance_score
explained_variance_score(amd_Y_test, y_pred1)

"""fb"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(fb_X_train, fb_Y_train)

y_pred2 = model.predict(fb_X_test)
# df2['Prediction'] = model.predict(np.array(df2.index).reshape(-1, 1))

from sklearn import metrics
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(fb_Y_test, y_pred2)))
print('R2: ', metrics.r2_score(fb_Y_test, y_pred2))
from sklearn.metrics import explained_variance_score
explained_variance_score(fb_Y_test, y_pred2)

"""f"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(ford_X_train, ford_Y_train)

y_pred3 = model.predict(ford_X_test)
# df3['Prediction'] = model.predict(np.array(df3.index).reshape(-1, 1))

from sklearn import metrics
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ford_Y_test, y_pred3)))
print('R2: ', metrics.r2_score(ford_Y_test, y_pred3))
from sklearn.metrics import explained_variance_score
explained_variance_score(ford_Y_test, y_pred3)

"""snap

"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(snap_X_train, snap_Y_train)

y_pred4 = model.predict(snap_X_test)
# df4['Prediction'] = model.predict(np.array(df4.index).reshape(-1, 1))

from sklearn import metrics
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(snap_Y_test, y_pred4)))
print('R2: ', metrics.r2_score(snap_Y_test, y_pred4))
from sklearn.metrics import explained_variance_score
explained_variance_score(snap_Y_test, y_pred4)

"""**XGboost**

apple
"""

from xgboost import XGBClassifier

apple_X_train = np.asarray(apple_X_train)
apple_Y_train = np.asarray(apple_Y_train)

xgb = XGBClassifier()
xgb.fit(apple_X_train, apple_Y_train)
y_pred = xgb.predict(apple_X_test)
# df['Prediction'] = xgb.predict(np.array(df.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(apple_Y_test, y_pred))
print("RMSE: %f" % (rmse))
print('R2: ', metrics.r2_score(apple_Y_test, y_pred))
from sklearn.metrics import explained_variance_score
explained_variance_score(apple_Y_test, y_pred)

"""amd"""

from xgboost import XGBClassifier

amd_X_train = np.asarray(amd_X_train)
amd_Y_train = np.asarray(amd_Y_train)


xgb = XGBClassifier()
xgb.fit(amd_X_train, amd_Y_train)
y_pred1 = xgb.predict(amd_X_test)
#df1['Prediction'] = xgb.predict(np.array(df1.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(amd_Y_test, y_pred1))
print("RMSE: %f" % (rmse))
print('R2: ', metrics.r2_score(amd_Y_test, y_pred1))
from sklearn.metrics import explained_variance_score
explained_variance_score(amd_Y_test, y_pred1)

"""facebook"""

from xgboost import XGBClassifier

fb_X_train = np.asarray(fb_X_train)
fb_Y_train = np.asarray(fb_Y_train)



xgb = XGBClassifier()
xgb.fit(fb_X_train, fb_Y_train)
y_pred2 = xgb.predict(fb_X_test)
#df2['Prediction'] = xgb.predict(np.array(df2.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(fb_Y_test, y_pred2))
print("RMSE: %f" % (rmse))
print('R2: ', metrics.r2_score(fb_Y_test, y_pred2))
from sklearn.metrics import explained_variance_score
explained_variance_score(fb_Y_test, y_pred2)

"""ford"""

from xgboost import XGBClassifier

ford_X_train = np.asarray(ford_X_train)
ford_Y_train = np.asarray(ford_Y_train)


xgb = XGBClassifier()
xgb.fit(ford_X_train, ford_Y_train)
y_pred3 = xgb.predict(ford_X_test)
#df3['Prediction'] = xgb.predict(np.array(df3.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(ford_Y_test, y_pred3))
print("RMSE: %f" % (rmse))
print('R2: ', metrics.r2_score(ford_Y_test, y_pred3))
from sklearn.metrics import explained_variance_score
explained_variance_score(ford_Y_test, y_pred3)

"""snap"""

from xgboost import XGBClassifier

snap_X_train = np.asarray(snap_X_train)
snap_Y_train = np.asarray(snap_Y_train)


xgb = XGBClassifier()
xgb.fit(snap_X_train, snap_Y_train)
y_pred4 = xgb.predict(snap_X_test)
#df4['Prediction'] = xgb.predict(np.array(df4.index).reshape(-1, 1))

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(snap_Y_test, y_pred4))
print("RMSE: %f" % (rmse))
print('R2: ', metrics.r2_score(snap_Y_test, y_pred4))
from sklearn.metrics import explained_variance_score
explained_variance_score(snap_Y_test, y_pred4)